# Fixia Backend - Optimized Dockerfile for SeeNode.com
# Multi-stage build for production efficiency

# =============================================================================
# Build Stage
# =============================================================================
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including devDependencies for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Create logs directory
RUN mkdir -p logs uploads

# Build optimization - could be used for transpilation if needed
RUN npm run build

# =============================================================================
# Production Stage
# =============================================================================
FROM node:18-alpine AS production

# Set working directory
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S fixia -u 1001 -G nodejs

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=fixia:nodejs /app .

# Create necessary directories with proper permissions
RUN mkdir -p logs uploads && \
    chown -R fixia:nodejs logs uploads

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV LOG_LEVEL=info

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node -e "require('http').get('http://localhost:5000/health', (res) => { \
        if (res.statusCode === 200) process.exit(0); else process.exit(1); \
    }).on('error', () => process.exit(1))"

# Expose port
EXPOSE 5000

# Switch to non-root user
USER fixia

# Labels for better organization
LABEL maintainer="Fixia Team" \
      version="1.0.0" \
      description="Fixia Backend API - Production Ready" \
      platform="SeeNode.com"

# Start application with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]

# =============================================================================
# SeeNode Optimization Features:
# =============================================================================
# ✅ Multi-stage build for smaller image size
# ✅ Non-root user for security
# ✅ Proper signal handling with dumb-init
# ✅ Health check for container orchestration
# ✅ Production dependencies only
# ✅ Optimized layer caching
# ✅ Security best practices
# ✅ Clear labels and documentation