-- 游빛 LIMPIEZA DE 칈NDICES REDUNDANTES - FIXIA.COM.AR
-- An치lisis de 칤ndices duplicados y innecesarios
-- 丘멆잺 EJECUTAR CON CUIDADO - HACER BACKUP PRIMERO

-- ===================================================================
-- PASO 1: AN츼LISIS DE REDUNDANCIAS DETECTADAS
-- ===================================================================

-- 游늵 Ver 칤ndices que pueden ser redundantes
SELECT 
    i.indexname,
    i.tablename,
    pg_size_pretty(pg_relation_size(i.indexname::text)) as size,
    CASE 
        WHEN i.indexname LIKE '%_pkey' THEN 'PRIMARY_KEY'
        WHEN i.indexname LIKE '%_key' THEN 'UNIQUE_CONSTRAINT' 
        WHEN i.indexname LIKE 'idx_%' THEN 'CUSTOM_INDEX'
        ELSE 'OTHER'
    END as index_type
FROM pg_indexes i
WHERE i.schemaname = 'public'
ORDER BY pg_relation_size(i.indexname::text) DESC;

-- ===================================================================
-- PASO 2: 칈NDICES POTENCIALMENTE REDUNDANTES
-- ===================================================================

-- 游댌 AN츼LISIS portfolio_categories:
-- Tiene 5 칤ndices en una tabla peque침a - posible over-indexing
-- Revisar si todos son necesarios:

-- Ver estructura de portfolio_categories
SELECT 
    indexname, 
    indexdef 
FROM pg_indexes 
WHERE tablename = 'portfolio_categories';

-- 游댌 AN츼LISIS email_verification_tokens:
-- 3 칤ndices en tabla de tokens temporales - revisar necesidad
SELECT 
    indexname, 
    indexdef 
FROM pg_indexes 
WHERE tablename = 'email_verification_tokens';

-- ===================================================================
-- PASO 3: RECOMENDACIONES DE LIMPIEZA (NO EJECUTAR A칔N)
-- ===================================================================

/*
丘멆잺 POSIBLES 칈NDICES A REVISAR (NO ELIMINAR SIN AN츼LISIS):

1. portfolio_categories - 5 칤ndices para tabla peque침a:
   - Mantener: portfolio_categories_pkey (PRIMARY KEY)
   - Mantener: portfolio_categories_name_key (UNIQUE)
   - Revisar necesidad: idx_portfolio_categories_parent_id
   - Revisar necesidad: idx_portfolio_categories_active  
   - Revisar necesidad: idx_portfolio_categories_sort_order

2. email_verification_tokens - 3 칤ndices para tabla temporal:
   - Mantener: email_verification_tokens_pkey (PRIMARY KEY)
   - Mantener: email_verification_tokens_token_key (UNIQUE)
   - Revisar: email_verification_tokens_user_id_type_key

3. 칈ndices peque침os en tablas activas:
   - Muchos 칤ndices de 8KB sugieren poca data o uso limitado
   - Evaluar si todos son necesarios para las queries actuales
*/

-- ===================================================================
-- PASO 4: COMANDO PARA VER USAGE DE 칈NDICES (SOLO AN츼LISIS)
-- ===================================================================

-- 游늵 Ver estad칤sticas de uso de 칤ndices (requiere activar pg_stat_statements)
-- SOLO para an치lisis - no eliminar 칤ndices sin datos de uso
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_tup_read,
    idx_tup_fetch
FROM pg_stat_user_indexes
WHERE schemaname = 'public'
ORDER BY idx_tup_read DESC;

-- ===================================================================
-- PASO 5: AN츼LISIS DE TAMA칌O DE TABLAS VS 칈NDICES
-- ===================================================================

-- Ver relaci칩n entre tama침o de tabla e 칤ndices
SELECT 
    t.tablename,
    pg_size_pretty(pg_total_relation_size(t.tablename::text)) as table_size,
    COUNT(i.indexname) as index_count,
    STRING_AGG(i.indexname, ', ') as indexes
FROM pg_tables t
LEFT JOIN pg_indexes i ON t.tablename = i.tablename AND i.schemaname = 'public'
WHERE t.schemaname = 'public'
GROUP BY t.tablename
ORDER BY pg_total_relation_size(t.tablename::text) DESC;

-- ===================================================================
-- RECOMENDACI칍N FINAL:
-- ===================================================================
/*
游꿢 ESTRATEGIA RECOMENDADA:
1. PRIMERO: Ejecutar OPTIMIZACION-INDICES-CRITICOS.sql
2. Monitorear performance por 1-2 semanas
3. Usar pg_stat_user_indexes para ver qu칠 칤ndices no se usan
4. LUEGO considerar eliminar 칤ndices redundantes con datos reales

丘멆잺 NO ELIMINAR 칈NDICES SIN:
- Backup completo de la DB
- An치lisis de uso con pg_stat_user_indexes  
- Testing en entorno de desarrollo
- Ventana de mantenimiento planificada

游늳 PRIORIDAD:
- ALTA: Crear 칤ndices cr칤ticos faltantes
- MEDIA: Optimizar 칤ndices existentes
- BAJA: Eliminar redundancias (solo con an치lisis detallado)
*/