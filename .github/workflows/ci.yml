name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: 14

jobs:
  # Backend Testing Job
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fixia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create logs directory
      working-directory: ./backend
      run: mkdir -p logs

    - name: Setup test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_NAME=fixia_test" >> .env.test
        echo "DB_USER=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key" >> .env.test
        echo "REDIS_HOST=localhost" >> .env.test
        echo "REDIS_PORT=6379" >> .env.test
        echo "ENABLE_REDIS_IN_TESTS=true" >> .env.test

    - name: Run database migrations
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
      run: npm run migrate

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || echo "Linting not configured"

    - name: Run backend unit tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-key
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ENABLE_REDIS_IN_TESTS: true
      run: npm run test:unit

    - name: Run backend integration tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-key
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ENABLE_REDIS_IN_TESTS: true
      run: npm run test:integration

    - name: Generate test coverage
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-key
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        ENABLE_REDIS_IN_TESTS: true
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Testing Job
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Build frontend
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:5000
        NODE_ENV: production
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 7

  # End-to-End Testing Job
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fixia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Skip root dependencies (no longer using workspaces)
      run: echo "Skipping root dependencies - using individual frontend/backend installs"

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Setup test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_NAME=fixia_test" >> .env.test
        echo "DB_USER=postgres" >> .env.test
        echo "DB_PASSWORD=postgres" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-key" >> .env.test
        echo "REDIS_HOST=localhost" >> .env.test
        echo "REDIS_PORT=6379" >> .env.test
        echo "PORT=5001" >> .env.test

    - name: Setup frontend environment
      working-directory: ./frontend
      run: |
        echo "NEXT_PUBLIC_API_URL=http://localhost:5001" > .env.local
        echo "NODE_ENV=test" >> .env.local

    - name: Run database migrations
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
      run: npm run migrate

    - name: Start backend server
      working-directory: ./backend
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: fixia_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        JWT_SECRET: test-jwt-secret-key
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 5001
      run: |
        npm start &
        echo $! > backend.pid
        sleep 10

    - name: Start frontend server
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:5001
        PORT: 3001
      run: |
        npm run dev &
        echo $! > frontend.pid
        sleep 20

    - name: Wait for servers to be ready
      run: |
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:5001/health
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3001

    - name: Run Cypress E2E tests
      working-directory: ./frontend
      env:
        CYPRESS_baseUrl: http://localhost:3001
        CYPRESS_apiUrl: http://localhost:5001
      run: npm run test:e2e

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots/
        retention-days: 7

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos/
        retention-days: 7

    - name: Stop servers
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
        fi

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit (backend)
      working-directory: ./backend
      run: |
        npm audit --audit-level=moderate --production || true

    - name: Run npm audit (frontend)
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --production || true

  # Deployment Job (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Build frontend for production
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        NODE_ENV: production
      run: npm run build

    - name: Deploy to Railway (Backend)
      working-directory: ./backend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway login --token $RAILWAY_TOKEN
        railway up --service backend

    - name: Deploy to Vercel (Frontend)
      working-directory: ./frontend
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        npm install -g vercel
        vercel --token $VERCEL_TOKEN --prod --yes

    - name: Run post-deployment health checks
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_API_URL }}/health
        curl -f ${{ secrets.PRODUCTION_FRONTEND_URL }}

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow